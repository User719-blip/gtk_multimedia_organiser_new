Overview :-
The goal of this project is to organize files by moving them into directories based on their file extensions. 
For example:
All .txt files will go into a directory named txt_folder.
All .png files will go into a directory named png_folder.

Files Involved:
core.cpp: Contains the main implementation logic for organizing files.
core.h: Header file that declares the functions used in core.cpp.

Libraries Used:
<filesystem>: To handle file and folder creation, and file renaming (moving).
<vector>: To store a list of files that need to be organized.
<string>: For handling file names and extensions.

Logical Flow:
1. Getting File Extensions (getfile_ext)
The getfile_ext function takes a file name as input and extracts its extension (e.g., .txt, .png, etc.). 
The function uses find_last_of('.') to find the position of the last dot in the file name.
If no dot is found, it returns an empty string.
Otherwise, it returns the file extension (everything after the last dot).

2. Creating Directories and Moving Files (save)
The save function is responsible for:
Taking a list of file names.
For each file, it determines its extension using getfile_ext.
It then checks if a folder for that extension exists (e.g., txt_folder, png_folder).
If the folder does not exist, it creates the folder using std::filesystem::create_directory.
It then moves the file into the corresponding folder using std::filesystem::rename

How to compile:

g++ -std=c++17 -o output/program home/main.cpp src/core.cpp

Flow Control:
        Start
          |
    Get List of Files
          |
    For Each File in List
          |
   Extract File Extension
          |
    Check If Folder Exists
          |
     ┌────┴────┐
     |         |
Folder Exists Folder Doesn't Exist
     |         |
Move File  Create Folder and Move File
     |         | 
     └────┬────┘
          |
   Print Success/Error
          |
         End


MAIN LOGIC :-

Purpose of the save function:
The save function is designed to move files into directories based on their file extensions. For example, if a file has a .txt extension, it will be moved to a folder called txt_folder. If the folder doesn't exist, it will be created first.

The function does the following steps:

Loops through each file name in the provided vector.
Extracts the file extension using the getfile_ext function.
Creates a folder based on the file extension if it doesn't already exist.
Moves the file into the respective folder.
Explanation of std::filesystem::path source(name);
std::filesystem::path source(name);
What is std::filesystem::path?
The std::filesystem::path class represents a file system path (either a directory or a file path). 
It's part of the C++17 standard and is used to manipulate paths in a portable and efficient manner. This class handles platform-specific differences in how paths are represented (e.g., / on Linux vs. \ on Windows).
What does source(name) do?
The constructor std::filesystem::path(name) converts the name (which is a std::string) into a std::filesystem::path object.
name is the file name passed in the vector, for example, "image1.png", "document1.txt", etc.
By creating a std::filesystem::path object with this constructor, you can then use path-related operations like file manipulation, querying, or constructing destination paths.
Why use std::filesystem::path here?
std::filesystem::path allows you to easily manipulate paths (e.g., extracting file names, extensions, and moving files).
It provides convenient methods like .filename(), .extension(), .parent_path(), etc., which work with paths in a way that handles cross-platform differences (for instance, Linux uses forward slashes (/) and Windows uses backslashes (\) in file paths).

Example:
If name is "image1.png", std::filesystem::path source(name) converts "image1.png" into a std::filesystem::path object representing that path.

**in main function pass absolute path to the vector**